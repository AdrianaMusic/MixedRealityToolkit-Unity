# [Template] Leap Motion Build Steps
parameters:
  Arch: ''  # x86|arm
  Platform: '' 
  UnityArgs: 'none' # [optional] additional args passed to Unity
  ScriptingBackend: 'default'  # [optional] default|.NET
  UnityVersion: ""


# Modify the CSC file to filter out warnings produced from leap 

# Get the leap core assets

# Import the leap core assets

# Make sure there are no errors

# Create a standalone build 
steps:
- powershell: |
   $UnityPath = ${Env:${{ parameters.UnityVersion }}}
   # Find unity.exe as Start-UnityEditor currently doesn't support arbitrary parameters
   $editor = Get-ChildItem $UnityPath -Filter 'Unity.exe' -Recurse | Select-Object -First 1 -ExpandProperty FullName
   
   # The build output goes to a unique combination of Platform + Arch + ScriptingBackend to ensure that
   # each build will have a fresh destination folder.
   $outDir = "$(Build.ArtifactStagingDirectory)\build\${{ parameters.Platform }}_${{ parameters.Arch }}_${{ parameters.ScriptingBackend }}"
   $logFile = New-Item -Path "$outDir\build\build.log" -ItemType File -Force
   $logDirectory = "$outDir\logs"

   $sceneList = "Assets\MRTK\Examples\Demos\HandTracking\Scenes\LeapMotionHandTrackingExample.unity"
   
   $extraArgs = ''
   If ("${{ parameters.Platform }}" -eq "Standalone")
   {
       $extraArgs += "-buildTarget StandaloneWindows"
   }

   If ("${{ parameters.UnityArgs }}" -ne "none")
   {
       $extraArgs += " ${{ parameters.UnityArgs }}"
   }

   If ("${{ parameters.ScriptingBackend }}" -eq ".NET")
   {
       $extraArgs += " -scriptingBackend 2"
   }


    # Start Unity and call the UpdateCSC method

   $proc = Start-Process -FilePath "$editor" -ArgumentList "-projectPath $(Get-Location) -executeMethod Microsoft.MixedReality.Toolkit.LeapMotion.UpdateCSC -sceneList $sceneList -logFile $($logFile.FullName) -batchMode -${{ parameters.Arch }} -buildOutput $outDir $extraArgs -CacheServerIPAddress $(Unity.CacheServer.Address) -logDirectory $logDirectory" -PassThru


   $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $logFile.FullName
   
   while (-not $proc.HasExited -and $ljob.HasMoreData)
   {
       Receive-Job $ljob
       Start-Sleep -Milliseconds 200
   }
   Receive-Job $ljob
   
   Stop-Job $ljob
   
   Remove-Job $ljob

   Stop-Process $proc

   Write-Output '====================================================='
   Write-Output '           Unity Build Player Finished               '
   Write-Output '====================================================='

   If (Test-Path $logFile.FullName)
   {
      Write-Output '====================================================='
      Write-Output '           Begin Unity Player Log                    '
      Write-Output '====================================================='

      Get-Content $logFile.FullName

      Write-Output '====================================================='
      Write-Output '           End Unity Player Log                      '
      Write-Output '====================================================='
   }
   Else
   {
      Write-Output 'Unity Player Log Missing!'
   }

   If ($proc.ExitCode -ne 0)
   {
       exit $proc.ExitCode
   }
displayName: "Build LeapExampleScene ${{ parameters.Platform }} ${{ parameters.Arch }} ${{ parameters.ScriptingBackend }}"

- task: PowerShell@2
  displayName: 'Validate build logs'
  inputs:
    targetType: filePath
    filePath: ./scripts/ci/validatebuildlog.ps1
    arguments: >
      -LogFile: '$(Build.ArtifactStagingDirectory)\build\${{ parameters.Platform }}_${{ parameters.Arch }}_${{ parameters.ScriptingBackend }}\build\build.log'